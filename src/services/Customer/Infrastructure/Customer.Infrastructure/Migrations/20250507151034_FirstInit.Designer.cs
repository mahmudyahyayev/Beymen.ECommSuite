// <auto-generated />
using System;
using Customer.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Customer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250507151034_FirstInit")]
    partial class FirstInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Customer.Domain.AggregateRoot.Addresses.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamptz")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<int>("_typeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_addresses_id");

                    b.HasIndex("_typeId")
                        .HasDatabaseName("ix_addresses_type_id");

                    b.ToTable("addresses", "address");
                });

            modelBuilder.Entity("Customer.Domain.AggregateRoot.Addresses.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_address_types");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_address_types_id");

                    b.ToTable("address_types", "address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "shipping"
                        },
                        new
                        {
                            Id = 2,
                            Name = "billing"
                        });
                });

            modelBuilder.Entity("Customer.Domain.AggregateRoot.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamptz")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_id");

                    b.ToTable("customers", "customer");
                });

            modelBuilder.Entity("Customer.Domain.AggregateRoot.Addresses.Address", b =>
                {
                    b.HasOne("Customer.Domain.AggregateRoot.Addresses.AddressType", "Type")
                        .WithMany()
                        .HasForeignKey("_typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_address_types_type_id");

                    b.OwnsOne("Customer.Domain.AggregateRoot.Addresses.Location", "City", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("city");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses", "address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Customer.Domain.AggregateRoot.Addresses.Location", "Country", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("country");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses", "address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Customer.Domain.AggregateRoot.Addresses.Location", "District", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("district");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses", "address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Customer.Domain.AggregateRoot.Addresses.Location", "Street", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("street");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses", "address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Customer.Domain.AggregateRoot.Addresses.Ownership", "CustomerId", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("customer_id");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses", "address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Customer.Domain.AggregateRoot.Addresses.ZipCode", "ZipCode", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("zip_code");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses", "address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("CustomerId");

                    b.Navigation("District");

                    b.Navigation("Street");

                    b.Navigation("Type");

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("Customer.Domain.AggregateRoot.Customers.Customer", b =>
                {
                    b.OwnsOne("Customer.Domain.AggregateRoot.Customers.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("email");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customers", "customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customers_customers_id");
                        });

                    b.OwnsOne("Customer.Domain.AggregateRoot.Customers.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("phone_number");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customers", "customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customers_customers_id");
                        });

                    b.Navigation("Email");

                    b.Navigation("PhoneNumber");
                });
#pragma warning restore 612, 618
        }
    }
}
