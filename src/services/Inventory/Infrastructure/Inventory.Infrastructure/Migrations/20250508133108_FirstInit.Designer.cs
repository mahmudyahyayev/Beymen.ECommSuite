// <auto-generated />
using System;
using Inventory.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Inventory.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250508133108_FirstInit")]
    partial class FirstInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Inventory.Domain.AggregateRoot.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamptz")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.Property<int>("_status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_products_id");

                    b.HasIndex("_status")
                        .HasDatabaseName("ix_products_status");

                    b.ToTable("products", "product");
                });

            modelBuilder.Entity("Inventory.Domain.AggregateRoot.Products.ProductStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_product_statuses");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_product_statuses_id");

                    b.ToTable("product_statuses", "product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "available"
                        },
                        new
                        {
                            Id = 2,
                            Name = "unavailable"
                        },
                        new
                        {
                            Id = 3,
                            Name = "discontinued"
                        });
                });

            modelBuilder.Entity("Inventory.Domain.AggregateRoot.Reservations.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error_message");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamptz")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<int>("_status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_reservations_id");

                    b.HasIndex("_status")
                        .HasDatabaseName("ix_reservations_status");

                    b.ToTable("reservations", "rezervation");
                });

            modelBuilder.Entity("Inventory.Domain.AggregateRoot.Reservations.ReservationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("uuid")
                        .HasColumnName("reservation_id");

                    b.HasKey("Id")
                        .HasName("pk_reservation_items");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_reservation_items_id");

                    b.HasIndex("ReservationId")
                        .HasDatabaseName("ix_reservation_items_reservation_id");

                    b.ToTable("reservation_items", "rezervation");
                });

            modelBuilder.Entity("Inventory.Domain.AggregateRoot.Reservations.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_reservation_statuses");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_reservation_statuses_id");

                    b.ToTable("reservation_statuses", "rezervation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "cancelled"
                        });
                });

            modelBuilder.Entity("Inventory.Domain.AggregateRoot.Products.Product", b =>
                {
                    b.HasOne("Inventory.Domain.AggregateRoot.Products.ProductStatus", "Status")
                        .WithMany()
                        .HasForeignKey("_status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_product_statusues_status");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Inventory.Domain.AggregateRoot.Reservations.Reservation", b =>
                {
                    b.HasOne("Inventory.Domain.AggregateRoot.Reservations.ReservationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("_status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_reservation_statuses_status");

                    b.OwnsOne("Inventory.Domain.AggregateRoot.Reservations.CustomerId", "CustomerId", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("customer_id");

                            b1.HasKey("ReservationId");

                            b1.ToTable("reservations", "rezervation");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId")
                                .HasConstraintName("fk_reservations_reservations_id");
                        });

                    b.OwnsOne("Inventory.Domain.AggregateRoot.Reservations.OrderId", "OrderId", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("order_id");

                            b1.HasKey("ReservationId");

                            b1.ToTable("reservations", "rezervation");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId")
                                .HasConstraintName("fk_reservations_reservations_id");
                        });

                    b.Navigation("CustomerId");

                    b.Navigation("OrderId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Inventory.Domain.AggregateRoot.Reservations.ReservationItem", b =>
                {
                    b.HasOne("Inventory.Domain.AggregateRoot.Reservations.Reservation", "Reservation")
                        .WithMany("Items")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_reservation_items_reservations_reservation_id");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Inventory.Domain.AggregateRoot.Reservations.Reservation", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
