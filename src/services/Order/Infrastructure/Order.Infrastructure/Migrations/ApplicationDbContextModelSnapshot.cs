// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Order.Infrastructure.Context;

#nullable disable

namespace Order.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Order.Domain.AggregateRoot.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamptz")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<decimal>("TotalPrice")
                        .HasMaxLength(2000)
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.Property<int>("_status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_orders_id");

                    b.HasIndex("_status")
                        .HasDatabaseName("ix_orders_status");

                    b.ToTable("orders", "order");
                });

            modelBuilder.Entity("Order.Domain.AggregateRoot.Orders.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.ToTable("order_items", "order");
                });

            modelBuilder.Entity("Order.Domain.AggregateRoot.Orders.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_order_statuses");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_order_statuses_id");

                    b.ToTable("order_statuses", "order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "created"
                        },
                        new
                        {
                            Id = 2,
                            Name = "paid"
                        },
                        new
                        {
                            Id = 3,
                            Name = "cancelled"
                        });
                });

            modelBuilder.Entity("Order.Domain.Projections.AddressReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("full_address");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_addresses_id");

                    b.ToTable("addresses", "address");
                });

            modelBuilder.Entity("Order.Domain.Projections.ProductReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_products_id");

                    b.ToTable("products", "product");
                });

            modelBuilder.Entity("Order.Domain.AggregateRoot.Orders.Order", b =>
                {
                    b.HasOne("Order.Domain.AggregateRoot.Orders.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("_status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_order_statuses_status");

                    b.OwnsOne("Order.Domain.AggregateRoot.Orders.CustomerId", "CustomerId", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("customer_id");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders", "order");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.OwnsOne("Order.Domain.AggregateRoot.Orders.AddressSnapshot", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("billing_address");

                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("billing_address_id");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders", "order");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.OwnsOne("Order.Domain.AggregateRoot.Orders.AddressSnapshot", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("shipping_address");

                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("shipping_address_id");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders", "order");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.Navigation("BillingAddress");

                    b.Navigation("CustomerId");

                    b.Navigation("ShippingAddress");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Order.Domain.AggregateRoot.Orders.OrderItem", b =>
                {
                    b.HasOne("Order.Domain.AggregateRoot.Orders.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.OwnsOne("Order.Domain.AggregateRoot.Orders.ProductSnapshot", "Product", b1 =>
                        {
                            b1.Property<Guid>("OrderItemId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("product_name");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("product_id");

                            b1.Property<decimal>("UnitPrice")
                                .HasColumnType("numeric")
                                .HasColumnName("unit_price");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("order_items", "order");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId")
                                .HasConstraintName("fk_order_items_order_items_id");
                        });

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Order.Domain.AggregateRoot.Orders.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
